extends ../layout

block content
  p(style="padding: 10px 10px 0 10px; margin: 10px 10px 0 10px; width: 720px;")
    b NOTE:
    |&nbsp;This page shows the API retrieval status of each agency's code.json. 
    ul(style="margin-top: 0;")
      li
        ="FAILURE status indicates that either the code.json does not exist, or it had severe errors which prevented the API from consuming it."
      li
        ="PARTIAL SUCCESS status indicates that the API was successful in finding and consuming the code.json, but that some errors and/or warnings might exist."
      li
        ="SUCCESS status indicates that the agency's code.json has been fully consumed without any issues."
    p(style="padding: 10px; margin: 10px;")
      i Last Updated:&nbsp;
        =statusData.timestamp
  -
    var statusDataArr = [];
    for (var agency in statusData.statuses) {
      statusDataArr.push(statusData.statuses[agency]);
    }
    statusDataArr = statusDataArr.sort(function (a, b) {
      aName = a.metadata.agency.acronym;
      bName = b.metadata.agency.acronym;
      if (aName > bName) {
        return 1;
      } else if (bName > aName) {
        return -1;
      }
      return 0;
    });
  p
    table
      tr
        th(colspan=7)
          ="Agencies that are required to comply with the Source Code Policy" 
      tr
        th(colspan=2) Agency
        th Code.json Link
        th Schema Version
        th(style="width:400px;") Notes
        th Issues
        th Discovered
      each data in statusDataArr
        if data.category === "required"
          tr
            td
              =data.metadata.agency.acronym
            td
              =data.metadata.agency.name
            td
              a(href=data.metadata.agency.codeUrl)
                =data.metadata.agency.codeUrl
            td
              =data.schemaVersion
            td
              if data.status.includes("FAILURE:")
                .failure
                  =data.status
              else if data.status.includes("PARTIAL SUCCESS:")
                .warning
                  =data.status
              else if data.status.includes("SUCCESS")
                .success
                  =data.status
              else
                =data.status
            td
              if data.issues.length
                a(href="status/" + data.metadata.agency.acronym + "/issues") view issues &rarr;
            td
              a(href="status/" + data.metadata.agency.acronym + "/discovered") view discovered repos &rarr;
  p
    table
      tr
        th(colspan=7)
          ="Agencies that are not required to comply with the Source Code Policy" 
      tr
        th(colspan=2) Agency
        th Code.json Link
        th Schema Version
        th(style="width:400px;") Notes
        th Issues
        th Discovered
      each data in statusDataArr
        if data.category === "optional"
          tr
            td
              =data.metadata.agency.acronym
            td
              =data.metadata.agency.name
            td
              a(href=data.metadata.agency.codeUrl)
                =data.metadata.agency.codeUrl
            td
              =data.schemaVersion
            td
              if data.status.includes("FAILURE:")
                .failure
                  =data.status
              else if data.status.includes("PARTIAL SUCCESS:")
                .warning
                  =data.status
              else if data.status.includes("SUCCESS")
                .success
                  =data.status
              else
                =data.status
            td
              if data.issues.length
                a(href="status/" + data.metadata.agency.acronym + "/issues") view issues &rarr;
            td
              a(href="status/" + data.metadata.agency.acronym + "/discovered") view discovered repos &rarr;
